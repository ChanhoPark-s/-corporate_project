<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.spring.mapper.Purchase_sheetMapper">
	<insert id="insertMainSheet">
		<!-- 인자로 넘겨받은 객체의 멤버변수인 no를 자동으로 시퀀스 값으로 세팅해줌 -->
		<selectKey keyProperty="no" order="BEFORE" resultType="int">
			select Purchase_sheet_seq.nextval from dual
		</selectKey>
	
		insert into Purchase_sheet
		values(#{no}, sysdate, #{delivery_date}, 0, #{order_no, jdbcType=INTEGER}, #{member_no}, #{client_no})
	</insert>

	<!-- main paging -->
	<select id="getTotalCount" resultType="int">
		select count(*) from
		(SELECT no ,member_no, client_no, order_no, day, delivery_date, status, client_name, member_name , LISTAGG(item_name,',') WITHIN GROUP (ORDER BY item_name) AS item_name, LISTAGG(in_price,',') WITHIN GROUP (ORDER BY item_name) AS totalPrice, LISTAGG(amount,',') WITHIN GROUP (ORDER BY item_name) AS totalAmount 
		FROM 
		(select p.no , p.member_no, p.client_no, p.order_no, p.day, p.delivery_date, p.status, c.name as client_name, m.name as member_name , i.name as item_name, i.in_price, psd.amount
				from Purchase_sheet p, Client c, Member m, purchase_sheet_detail psd, item i
				where p.client_no = c.no(+)
				and p.member_no = m.no(+)
				and p.no = psd.purchase_sheet_no(+)
				and psd.item_no = i.no(+)
				order by p.no desc)
		<if test="whatColumn=='client_name'">where client_name like '%' ||  #{keyword} || '%'</if>
		<if test="whatColumn=='member_name'">where member_name like '%' ||  #{keyword} || '%'</if>
		<if test="whatColumn=='item_name'">where item_name like '%' ||  #{keyword} || '%'</if>
		GROUP BY no,member_no, client_no, order_no, day, delivery_date, status, client_name, member_name
		ORDER BY no desc)
	</select>
	
	<!-- 발주서조회(페이징) -->
	<select id="GetAll" resultType="com.spring.domain.Purchase_sheetVO">
		SELECT no ,member_no, client_no, order_no, day, delivery_date, status, client_name, member_name , LISTAGG(item_name,',') WITHIN GROUP (ORDER BY item_name) AS item_name, LISTAGG(in_price,',') WITHIN GROUP (ORDER BY item_name) AS totalPrice, LISTAGG(amount,',') WITHIN GROUP (ORDER BY item_name) AS totalAmount 
		FROM 
		(select p.no , p.member_no, p.client_no, p.order_no, p.day, p.delivery_date, p.status, c.name as client_name, m.name as member_name , i.name as item_name, i.in_price, psd.amount
				from Purchase_sheet p, Client c, Member m, purchase_sheet_detail psd, item i
				where p.client_no = c.no(+)
				and p.member_no = m.no(+)
				and p.no = psd.purchase_sheet_no(+)
				and psd.item_no = i.no(+)
				order by p.no desc)
		<if test="whatColumn=='client_name'">where client_name like '%' ||  #{keyword} || '%'</if>
		<if test="whatColumn=='member_name'">where member_name like '%' ||  #{keyword} || '%'</if>
		<if test="whatColumn=='item_name'">where item_name like '%' ||  #{keyword} || '%'</if>
		GROUP BY no,member_no, client_no, order_no, day, delivery_date, status, client_name, member_name
		ORDER BY no desc OFFSET #{beginRow} ROWS FETCH NEXT #{pageSize} ROWS ONLY
	</select>  
	
	<!-- 발주서조회(안씀) -->
	<select id="selectAll" resultType="com.spring.domain.Purchase_sheetVO">
		SELECT no ,member_no, client_no, order_no, day, delivery_date, status, client_name, member_name , LISTAGG(item_name,',') WITHIN GROUP (ORDER BY item_name) AS item_name
		FROM 
		(select p.no , p.member_no, p.client_no, p.order_no, p.day, p.delivery_date, p.status, c.name as client_name, m.name as member_name , i.name as item_name
				from Purchase_sheet p, Client c, Member m, purchase_sheet_detail psd, item i
				where p.client_no = c.no(+)
				and p.member_no = m.no(+)
				and p.no = psd.purchase_sheet_no(+)
				and psd.item_no = i.no(+)
				order by p.no desc)
		GROUP BY no,member_no, client_no, order_no, day, delivery_date, status, client_name, member_name
		ORDER BY status,no desc
	</select>
	
	<select id="selectOne" resultType="com.spring.domain.Purchase_sheetVO">
		select * from Purchase_sheet where no = #{no}
	</select>

	<insert id="insert">
		insert into Purchase_sheet values(Purchase_sheet_SEQ.nextval, sysdate, #{delivery_date}, 0, #{order_no}, #{member_no}, #{client_no})
	</insert>
	
	<!--납품날짜가 지남 상태:취소됨 -->
	<update id="update">
		update Purchase_sheet 
		set status = 2
		where status = 0 
		<![CDATA[
		and delivery_date < SYSDATE
		]]>
	</update>
	
	<!--입고완료 확인함 상태:입고완료 -->
	<update id="updateStatus">
		update Purchase_sheet
		set status = 1
		where status = 0 
		and no = #{no}
	</update>
	
	<!-- 삭제버튼을 누름 상태:취소됨 -->
	<update id="delete">
		update Purchase_sheet set status=2 where no=#{no} and status=0
	</update>
	
	<!-- 이하 ajax API 관련 SQL -->
	<select id="getListWithPaging" resultType="com.spring.domain.Purchase_sheetVO">
		<![CDATA[
		select * from (
	        select * from(
		        select  rownum rn, p.no , p.day, c.no as client_no, c.name as client_name, m.no as Member_no, m.name as member_name
		        from purchase_sheet p, Client c, Member m        
		        where p.client_no = c.no(+) and p.member_no = m.no(+)
		        order by no desc)
		    where rownum <= #{cri.pageNum} * #{cri.amount}
		)where rn > (#{cri.pageNum} - 1) * #{cri.amount}
		]]>  
	</select>
	
	<select id="selectSubAllByMainNo" resultType="com.spring.domain.OrderSheetDetailVO">
		select no, PURCHASE_SHEET_NO, amount, item_no, item_code, item_name, in_price, out_price, client_no, client_code, client_name
		from(
			select p.no, p.PURCHASE_SHEET_NO, p.amount, i.no item_no, i.code item_code, i.name item_name,in_price, out_price, c.no client_no, c.code client_code, c.name client_name
			from PURCHASE_SHEET_DETAIL p inner join item i
			on p.item_no = i.no
			inner join client c
			on i.client_no = c.no
		)where PURCHASE_SHEET_NO = #{mainNo}
	</select>
	
	<select id="selectOneByMainNo" resultType="com.spring.domain.Purchase_sheetVO">
		select no, day, status, member_no, member_name, dep_no, dep_code, dep_name, client_no, client_code, client_name
		from(
			select o.no, to_char(to_date(o.DELIVERY_DATE), 'yyyy-MM-dd') day, o.status, m.no member_no, m.name member_name, d.no dep_no, d.code dep_code, d.name dep_name, c.no client_no, c.code client_code, c.name client_name
			from purchase_sheet o inner join member m
			on o.member_no = m.no
			inner join client c
			on o.client_no = c.no
			inner join department d
			on m.dep_no = d.no)
		where no=#{no}
	</select>
	
	<select id="getCountAll" resultType="int">
		select count(*)
        from purchase_sheet
	</select>
	
	<!-- 디테일 -->
	<select id="selectList" resultType="com.spring.domain.Purchase_sheet_DetailVO">
		select pd.no, pd.PURCHASE_SHEET_NO, pd.ORDER_DETAIL_NO, pd.AMOUNT, i.IN_PRICE, pd.STATUS, pd.ITEM_NO, pd.WARE_NO, i.name as ITEM_Name, w.name as WARE_Name , i.code as ITEM_Code
		from Purchase_sheet_Detail pd, ITEM i, warehouse w
		where pd.ITEM_NO = i.no(+)
		and pd.WARE_NO = w.no(+)
		and pd.purchase_sheet_no = #{purchase_sheet_no}
	</select>
	
	<insert id="insertDetailSheet">
		insert into Purchase_sheet_Detail
		values(Purchase_sheet_Detail_SEQ.nextval, #{mainSheetNo}, #{orderDetailNo, jdbcType=INTEGER}, #{itemAmount}, 0, #{itemNo}, #{wareNo})
	</insert>
	
	<update id="deleteDetail">
		update Purchase_sheet_Detail set status=2 where Purchase_sheet_no=#{no} and status=0
	</update>
	
	<update id="updateDetailStatus">
	update Purchase_sheet_Detail
		set status = 1 
		where status = 0
		and Purchase_sheet_No = #{no}
	</update>
	

</mapper>